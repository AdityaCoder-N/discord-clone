// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile{
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String
  name String
  imageUrl String @db.String
  email String @db.String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  imageUrl String @db.String
  inviteCode String @unique

  profileId String @db.Uuid
  profile Profile @relation(fields: [profileId],references: [id] , onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role MemberRole @default(GUEST)

  profileId String @db.Uuid
  profile Profile @relation(fields: [profileId],references: [id] , onDelete: Cascade)

  serverId String @db.Uuid
  server Server @relation(fields: [serverId],references: [id], onDelete: Cascade)

  msessages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String 
  type ChannelType @default(TEXT)

  profileId String @db.Uuid
  profile Profile @relation(fields: [profileId],references:[id],onDelete: Cascade ) 

  serverId String @db.Uuid
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  @@index([profileId])
  @@index([serverId])

}

model Message{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String @db.String

  fileUrl String? @db.String

  memberId String @db.Uuid
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String @db.Uuid
  channel Channel @relation(fields: [channelId], references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])

}

model Conversation{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  memberOneId String @db.Uuid
  memberOne Member @relation("MemberOne",fields: [memberOneId], references: [id],onDelete: Cascade)

  memberTwoId String @db.Uuid
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId], references: [id],onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])

}

model DirectMessage{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String @db.String
  fileUrl String? @db.String

  memberId String @db.Uuid
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  conversationId String @db.Uuid
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)


  @@index([memberId])
  @@index([conversationId])
}